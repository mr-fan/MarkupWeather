<?php

/**
 * Markup Yahoo! Weather
 *
 * Display weather forecast using Yahoo! Weather API
 *
 * Author 2013 Nikola Vidoni
 *
 * Weather icons by umutavci, http://umutavci.deviantart.com/
 *
 * Version 1.0.2
 *
 * ProcessWire 2.x
 * Copyright (C) 2013 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 */

class MarkupWeather extends WireData implements Module, ConfigurableModule {

    /**
     * Return information about this module (required)
     *
     */
	public static function getModuleInfo() {
		return array(
			'title' => 'Markup Yahoo! Weather',
			'version' => 102,
			'summary' => __('Display weather forecast using Yahoo! Weather API', __FILE__),
            'autoload' => false,
            'singular' => true
		);
	}

    /**
     * Initialize the module
     *
     */
    public function init() {
        // Hook before page render
        $this->addHookAfter('Page::render', $this, 'addScripts');
    }

    /**
     * Default options for module
     *
     */
    protected static $options = array(
        'woeid' => '851128', // Yahoo! Woeid (Where on Earth IDentifier)
        'locale' => 'en_US', // PHP locale in setlocale() format
        'date' => '%A, %d.%m.%Y.', // PHP date in strftime() format
        'days' => 1, // shows 5 day forecast below current weather forecast, default = checked
        'scale' => 0 // display temperature in Fahrenheit instead of Celsius, default = unchecked
    );

    /**
     * Get and set options defined above
     *
     */
    public function __construct() {
	   foreach(self::$options as $key => $value) {
		   	$this->set($key, $value);
	   }
	}

    /**
     * Hook scripts and styles during Page Render
     *
     */
    public function addScripts(HookEvent $event) {

        $page = $event->object;

        if($page->template == "admin") return;

        $script = "<link rel='stylesheet' type='text/css' href='{$this->config->urls->MarkupWeather}MarkupWeather.css' />\n";
        $script .= "<script type='text/javascript' src='{$this->config->urls->MarkupWeather}MarkupWeather.js'></script>\n";

        $event->return = str_ireplace("</head>", "$script</head>", $event->return);

    }

    /**
     * Render weather conditions
     *
     * Returns markup of weather conditions defined with options set in module itself
     *
     */
    public function ___render() {

        if(wire()->page->template == 'admin') return;

        // Check what temperature scale is in use
        $scale = $this->scale ? 'f' : 'c';
        // Get weather data
        $result = file_get_contents('http://weather.yahooapis.com/forecastrss?w=' . $this->woeid . '&u=' . $scale);
		if($result){
			$xml = simplexml_load_string($result);
			$xml->registerXPathNamespace('yweather', 'http://xml.weather.yahoo.com/ns/rss/1.0');

			$location = $xml->channel->xpath('yweather:location');

			if(!empty($location)) {

				foreach($xml->channel->item as $item) {

					// Initialize setlocale and display date using localized format
					setlocale(LC_ALL, "{$this->locale}.UTF-8");

					// Translatable array of days
					$days = array(
						'Mon' => __("Mon", __FILE__),
						'Tue' => __("Tue", __FILE__),
						'Wed' => __("Wed", __FILE__),
						'Thu' => __("Thu", __FILE__),
						'Fri' => __("Fri", __FILE__),
						'Sat' => __("Sat", __FILE__),
						'Sun' => __("Sun", __FILE__)
					);

					// Translatable array of conditions
					$conditions = array(
						'0' => __("Tornado", __FILE__),
						'1' => __("Tropical Storm", __FILE__),
						'2' => __("Hurricane", __FILE__),
						'3' => __("Severe Thunderstorms", __FILE__),
						'4' => __("Thunderstorms", __FILE__),
						'5' => __("Mixed Rain And Snow", __FILE__),
						'6' => __("Mixed Rain And Sleet", __FILE__),
						'7' => __("Mixed Snow And Sleet", __FILE__),
						'8' => __("Freezing Drizzle", __FILE__),
						'9' => __("Drizzle", __FILE__),
						'10' => __("Freezing Rain", __FILE__),
						'11' => __("Showers", __FILE__),
						'12' => __("Showers", __FILE__),
						'12' => __("Snow Flurries", __FILE__),
						'13' => __("Snow Flurries", __FILE__),
						'14' => __("Light Snow Showers", __FILE__),
						'15' => __("Blowing Snow", __FILE__),
						'16' => __("Snow", __FILE__),
						'17' => __("Hail", __FILE__),
						'18' => __("Sleet", __FILE__),
						'19' => __("Dust", __FILE__),
						'20' => __("Foggy", __FILE__),
						'21' => __("Haze", __FILE__),
						'22' => __("Smoky", __FILE__),
						'23' => __("Blustery", __FILE__),
						'24' => __("Windy", __FILE__),
						'25' => __("Cold", __FILE__),
						'26' => __("Cloudy", __FILE__),
						'27' => __("Mostly Cloudy (Night)", __FILE__),
						'28' => __("Mostly Cloudy (Day)", __FILE__),
						'29' => __("Partly Cloudy (Night)", __FILE__),
						'30' => __("Partly Cloudy (Day)", __FILE__),
						'31' => __("Clear", __FILE__),
						'32' => __("Sunny", __FILE__),
						'33' => __("Fair (Night)", __FILE__),
						'34' => __("Fair (Day)", __FILE__),
						'35' => __("Mixed Rain And Hail", __FILE__),
						'36' => __("Hot", __FILE__),
						'37' => __("Isolated Thunderstorms", __FILE__),
						'38' => __("Scattered Thunderstorms", __FILE__),
						'39' => __("Scattered Thunderstorms", __FILE__),
						'40' => __("Scattered Showers", __FILE__),
						'41' => __("Heavy Snow", __FILE__),
						'42' => __("Scattered Snow Showers", __FILE__),
						'43' => __("Heavy Snow", __FILE__),
						'44' => __("Partly Cloudy", __FILE__),
						'45' => __("Thundershowers", __FILE__),
						'46' => __("Snow Showers", __FILE__),
						'47' => __("Isolated Thundershowers", __FILE__),
						'3200' => __("Not Available", __FILE__)
					);

					$current = $item->xpath('yweather:condition');
					$forecast = $item->xpath('yweather:forecast');

					$current = $current[0];
					
					//get the text from the array key as the weather api code
					$code = $current[code];
					function find_by_key($searched, $array){
						if(!is_array($array)) return FALSE; // We haven't passed a valid array
						foreach($array as $key=>$value){
							if($key==$searched) return $value; // Match found, return value
						}
						return FALSE; // Nothing was found
					}
					$conditionString = find_by_key($code, $conditions);
					//check if code was correct or not in our array
					if ($conditionString) {
						$conditionOut = "<div class='conditions'>" . __("Current Conditions:", __FILE__) . " <span>" .$conditionString. "</span></div>";
					} else {
						$conditionOut = "";
					}
					
					// Weather forecast container
					$out = "<div id='weather'>";
					$out .= "<div class='location'><h3>Aktuelles Wetter in<br>" . $location[0]['city'] . "</h3><span>" . iconv('ISO-8859-2', 'UTF-8', strftime($this->date, strtotime(date("d.m.Y.")))) . "</span></div>";
					$out .= "<div class='current'>";
					$out .= "<img src='" . str_replace("http://l.yimg.com/a/i/us/we/52/", "{$this->config->urls->MarkupWeather}icons/", "http://l.yimg.com/a/i/us/we/52/" . $current['code'] . ".png") . "' />";
					$out .= "<span class='temp'>" . $current['temp'] . "&deg;" . strtoupper($scale) . "</span>";
					$out .= $conditionOut;
					$out .= "</div>";

					// Show 5 day forecast below current weather forecast
					if($this->days == 1) {
						$out .= "<ul class='forecast'>";
						for($i = 0; $i < 5; $i++) {
							$out .= "<li><span class='day'>" . str_replace(array_keys($days), $days, $forecast[$i]['day']) . "</span>" . "<img class='tip' src='" . str_replace("http://l.yimg.com/a/i/us/we/52/", "{$this->config->urls->MarkupWeather}icons/", "http://l.yimg.com/a/i/us/we/52/" . $forecast[$i]['code'] . ".png") . "' title='" . str_replace(array_keys($conditions), $conditions, $forecast[$i]['text']) . "' /><span class='high'>" . $forecast[$i]['high'] . "&deg;" . strtoupper($scale) . "</span><span class='low'>" . $forecast[$i]['low'] . "&deg;" . strtoupper($scale) . "</span></li>";
						}
						$out .= "</ul>";
					}

					$out .= "</div>";

					return $out;

				}
			}
		}
    }

    /**
     * Configure the module
     *
     */
	static public function getModuleConfigInputfields(array $data) {

		$fields = new InputfieldWrapper();

		$modules = wire('modules');

		$data = array_merge(self::$options, $data);

        $field = $modules->get("InputfieldText");
		$field->name = "woeid";
		$field->label = "Yahoo! Weather Woeid";
		$field->value = $data['woeid'];
		$field->description = __("Woeid is a number located right beside the city name, e.g. http://weather.yahoo.com/croatia/grad-zagreb/zagreb-851128/", __FILE__);
		$fields->add($field);

        $field = $modules->get("InputfieldText");
		$field->name = "locale";
		$field->label = "Set Locale";
		$field->value = $data['locale'];
		$field->notes = __("See the [PHP setlocale](http://php.net/manual/en/function.setlocale.php) function reference for more information on how to customize this format.", __FILE__);
		$fields->add($field);

        $field = $modules->get("InputfieldText");
		$field->name = "date";
		$field->label = "Date Format";
		$field->value = $data['date'];
		$field->notes = __("See the [PHP strftime](http://php.net/manual/en/function.strftime.php) function reference for more information on how to customize this format.", __FILE__);
		$fields->add($field);

        $field = $modules->get("InputfieldCheckbox");
		$field->name = "days";
        $field->label = __("Show 5 day forecast below current weather forecast?", __FILE__);
        $field->value = 1;
		$field->attr('checked', empty($data['days']) ? '' : 'checked');
		$fields->add($field);

        $field = $modules->get("InputfieldCheckbox");
		$field->name = "scale";
        $field->label = __("Display temperature in Fahrenheit instead of Celsius?", __FILE__);
        $field->value = 1;
		$field->attr('checked', empty($data['scale']) ? '' : 'checked');
		$fields->add($field);

		return $fields;

    }

}
